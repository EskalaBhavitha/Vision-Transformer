#Vision Transformer
import torch
import torch.nn as nn
import torch.nn.functional as F

class PatchEmbedding(nn.Module):
    def __init__(self, image_size, patch_size, in_channels, embed_dim):
        super(PatchEmbedding, self).__init__()
        self.patch_size = patch_size
        self.image_size = image_size
        self.embed_dim = embed_dim
        self.num_patches = (image_size // patch_size) ** 2

        self.projection = nn.Conv2d(in_channels, embed_dim, kernel_size=patch_size, stride=patch_size)
        self.position_embeddings = nn.Parameter(torch.zeros(1, self.num_patches + 1, embed_dim))  # +1 for CLS token

    def forward(self, x):
        batch_size = x.size(0)
        x = self.projection(x)  # (B, embed_dim, num_patches, num_patches)
        x = x.flatten(2).transpose(1, 2)  # (B, num_patches, embed_dim)

        cls_token = torch.zeros(batch_size, 1, self.embed_dim, device=x.device)
        x = torch.cat((cls_token, x), dim=1)  # Add CLS token
        x = x + self.position_embeddings
        return x

class TransformerBlock(nn.Module):
    def __init__(self, embed_dim, num_heads, ff_hidden_dim, dropout=0.1):
        super(TransformerBlock, self).__init__()
        self.attention = nn.MultiheadAttention(embed_dim, num_heads, dropout=dropout)
        self.ffn = nn.Sequential(
            nn.Linear(embed_dim, ff_hidden_dim),
            nn.ReLU(),
            nn.Linear(ff_hidden_dim, embed_dim)
        )
        self.layernorm1 = nn.LayerNorm(embed_dim)
        self.layernorm2 = nn.LayerNorm(embed_dim)
        self.dropout = nn.Dropout(dropout)

    def forward(self, x):
        # Multi-head self-attention
        attn_output, _ = self.attention(x, x, x)
        x = self.layernorm1(x + self.dropout(attn_output))

        # Feed-forward network
        ffn_output = self.ffn(x)
        x = self.layernorm2(x + self.dropout(ffn_output))
        return x

class VisionTransformer(nn.Module):
    def __init__(self, image_size, patch_size, in_channels, embed_dim, num_heads, num_layers, ff_hidden_dim, num_classes):
        super(VisionTransformer, self).__init__()
        self.patch_embedding = PatchEmbedding(image_size, patch_size, in_channels, embed_dim)
        self.transformer_blocks = nn.ModuleList([
            TransformerBlock(embed_dim, num_heads, ff_hidden_dim) for _ in range(num_layers)
        ])
        self.pooling = nn.AdaptiveAvgPool1d(1)
        self.classifier = nn.Linear(embed_dim, num_classes)

    def forward(self, x):
        x = self.patch_embedding(x)  # (B, num_patches + 1, embed_dim)

        for block in self.transformer_blocks:
            x = block(x)  # (B, num_patches + 1, embed_dim)

        x = x[:, 0]  # Take the CLS token (B, embed_dim)
        x = self.classifier(x)  # (B, num_classes)
        return x

# Example usage
if __name__ == "__main__":
    image_size = 224
    patch_size = 16
    in_channels = 3
    embed_dim = 768
    num_heads = 12
    num_layers = 12
    ff_hidden_dim = 3072
    num_classes = 1000

    model = VisionTransformer(image_size, patch_size, in_channels, embed_dim, num_heads, num_layers, ff_hidden_dim, num_classes)
    print(model)
